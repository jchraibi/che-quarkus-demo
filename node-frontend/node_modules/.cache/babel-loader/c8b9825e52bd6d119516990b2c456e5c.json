{"ast":null,"code":"var _jsxFileName = \"/projects/che-quarkus-demo/node-frontend/src/components/PostInput.js\";\nimport React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\n\nclass PostInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      post: {\n        title: \"\",\n        content: \"\",\n        timestamp: 0\n      },\n      submitError: false\n    };\n    this.handleTitleChange = this.handleTitleChange.bind(this);\n    this.handleContentChange = this.handleContentChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleTitleChange(event) {\n    this.setState({\n      post: Object.assign({}, this.state.post, {\n        title: event.target.value\n      })\n    });\n  }\n\n  handleContentChange(event) {\n    this.setState({\n      post: Object.assign({}, this.state.post, {\n        content: event.target.value\n      })\n    });\n  }\n\n  handleSubmit(event) {\n    var now = Date.now();\n    fetch(\"\".concat(process.env.REACT_APP_BACKEND_HOST, \"/posts\"), {\n      method: 'POST',\n      body: JSON.stringify(Object.assign({}, this.state.post, {\n        timestamp: now\n      })),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      if (response.status !== 200) {\n        this.setState({\n          submitError: response.status\n        });\n        return;\n      }\n\n      response.json().then(data => console.log(\"Recieved response:\" + data));\n      window.location.reload();\n    }).catch(error => console.log(error));\n    event.preventDefault();\n  }\n\n  handleErrorAlert() {\n    if (this.state.submitError) {\n      return React.createElement(Alert, {\n        variant: \"danger\",\n        dismissible: true,\n        onClose: () => this.setState({\n          submitError: false\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"Unable to submit post, received status \", this.state.submitError, \" from server.\");\n    }\n  }\n\n  render() {\n    return React.createElement(Container, {\n      className: \"post-input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, this.handleErrorAlert(), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      controlId: \"formTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Title\"), React.createElement(Form.Control, {\n      type: \"text\",\n      value: this.state.title,\n      onChange: this.handleTitleChange,\n      placeholder: \"Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })), React.createElement(Form.Group, {\n      controlId: \"formContnet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Content\"), React.createElement(Form.Control, {\n      as: \"textarea\",\n      value: this.state.content,\n      onChange: this.handleContentChange,\n      placeholder: \"Enter text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    })), React.createElement(Button, {\n      variant: \"primary\",\n      type: \"submit\",\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Submit\")));\n  }\n\n}\n\nexport default PostInput;","map":{"version":3,"sources":["/projects/che-quarkus-demo/node-frontend/src/components/PostInput.js"],"names":["React","Form","Container","Button","Alert","PostInput","Component","constructor","props","state","post","title","content","timestamp","submitError","handleTitleChange","bind","handleContentChange","handleSubmit","event","setState","Object","assign","target","value","now","Date","fetch","process","env","REACT_APP_BACKEND_HOST","method","body","JSON","stringify","headers","then","response","status","json","data","console","log","window","location","reload","catch","error","preventDefault","handleErrorAlert","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Form from 'react-bootstrap/Form'\nimport Container from 'react-bootstrap/Container'\nimport Button from 'react-bootstrap/Button'\nimport Alert from 'react-bootstrap/Alert'\n\nclass PostInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      post: {\n        title: \"\",\n        content: \"\",\n        timestamp: 0,  \n      },\n      submitError: false,\n    };\n\n    this.handleTitleChange = this.handleTitleChange.bind(this);\n    this.handleContentChange = this.handleContentChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleTitleChange(event) {\n    this.setState({\n      post: Object.assign({}, this.state.post, {title: event.target.value})\n    });\n  }\n\n  handleContentChange(event) {\n    this.setState({\n      post: Object.assign({}, this.state.post, {content: event.target.value})\n    });\n  }\n\n  handleSubmit(event) {\n    var now = Date.now();\n    fetch(`${process.env.REACT_APP_BACKEND_HOST}/posts`, {\n        method: 'POST',\n        body: JSON.stringify(Object.assign({}, this.state.post, {timestamp: now})),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n      .then(response => {\n        if (response.status !== 200) {\n          this.setState({submitError: response.status})\n          return;\n        }\n\n        response.json().then(data => console.log(\"Recieved response:\" + data));\n        window.location.reload()\n      })\n      .catch(error => console.log(error));\n    event.preventDefault();\n  }\n\n  handleErrorAlert() {\n    if (this.state.submitError) {\n      return (\n        <Alert variant=\"danger\"\n               dismissible\n               onClose={() => this.setState({submitError: false})}>\n          Unable to submit post, received status {this.state.submitError} from server.\n        </Alert>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <Container className=\"post-input\">\n        {this.handleErrorAlert()}\n        <Form>\n          <Form.Group controlId=\"formTitle\">\n            <Form.Label>Title</Form.Label>\n            <Form.Control \n              type=\"text\" \n              value={this.state.title}\n              onChange={this.handleTitleChange}\n              placeholder=\"Title\" />\n          </Form.Group>\n          <Form.Group controlId=\"formContnet\">\n            <Form.Label>Content</Form.Label>\n            <Form.Control \n              as=\"textarea\"\n              value={this.state.content}\n              onChange={this.handleContentChange}\n              placeholder=\"Enter text\" />\n          </Form.Group>\n          <Button variant=\"primary\" type=\"submit\" onClick={this.handleSubmit}>\n            Submit\n          </Button>\n        </Form>\n      </Container>\n    )\n  }\n}\n\nexport default PostInput"]},"metadata":{},"sourceType":"module"}